version: '3.8'

services:
  # GraphQL Gateway 
  graphql-gateway:
    build: ./graphql
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - USER_SERVICE_URL=http://user-service:3001
      - NOTIFICATION_SERVICE_URL=http://notification-service:3002
      - RECOMMENDATION_SERVICE_URL=http://recommendation-service:3003
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your_jwt_secret_key_change_in_production
    depends_on:
      - user-service
      - notification-service
      - recommendation-service
      - redis
    networks:
      - app-network
    volumes:
      - ./shared-types:/usr/src/app
      - ./graphql:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
    
  # User Service

  user-service:
    build: ./user-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongo-user:27017/user-db
      - JWT_SECRET=your_jwt_secret_key_change_in_production
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - redis
      - mongo-user
      - kafka
      - zookeeper
    networks:
      - app-network
    volumes:
      - ./shared-types:/usr/src/app
      - ./user-service:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  # Notification Service

  notification-service:
    build: ./notification-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongo-notification:27017/notification-service
      - JWT_SECRET=your_jwt_secret_key_change_in_production
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - kafka
      - redis
      - mongo-notification
      - zookeeper
    networks:
      - app-network
    volumes:
      - ./shared-types:/usr/src/app
      - ./notification-service:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  # Recommendation Service
  recommendation-service:
    build: ./recommendation-service
    ports: 
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongo-recommendation:27017/recommendation-service
      - JWT_SECRET=your_jwt_secret_key_change_in_production
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - kafka
      - redis
      - mongo-recommendation
      - zookeeper
    networks:
      - app-network
    volumes:
      - ./shared-types:/usr/src/app
      - ./recommendation-service:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  # Product Service
  product-service:
    build: ./product-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongo-product:27017/product-service
      - JWT_SECRET=your_jwt_secret_key_change_in_production
    depends_on:
      - redis
      - kafka
      - zookeeper
      - mongo-product
    networks:
      - app-network
    volumes:
      - ./shared-types:/usr/src/app
      - ./product-service:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  # Order Service

  order-service:
    build: ./order-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongo-order:27017/order-service
      - JWT_SECRET=your_jwt_secret_key_change_in_production
    depends_on:
      - redis
      - kafka
      - zookeeper
      - mongo-order
    networks:
      - app-network
    volumes:
      - ./shared-types:/usr/src/app
      - ./order-service:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  # Scheduler Service

  scheduler-service:
    build: ./scheduler-service
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - PORT=3006
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongo-scheduler:27017/scheduler-service
      - JWT_SECRET=your_jwt_secret_key_change_in_production
    depends_on:
      - redis
      - kafka
      - zookeeper
      - mongo-scheduler
    networks:
      - app-network
    volumes:
      - ./shared-types:/usr/src/app
      - ./scheduler-service:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  # Redis

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

  # Databases

  mongo-user:
    image: mongo:latest
    ports:
      - "27017:27017"
    networks:
      - app-network

  mongo-notification:
    image: mongo:latest
    ports:
      - "27018:27017"
    networks:
      - app-network
  mongo-recommendation:
    image: mongo:latest
    ports:
      - "27019:27017"
    networks:
      - app-network
  mongo-product:
    image: mongo:latest
    ports:
      - "27020:27017"
    networks:
      - app-network
  mongo-order:
    image: mongo:latest
    ports:
      - "27021:27017"
    networks:
      - app-network

  mongo-scheduler:
    image: mongo:latest
    ports:
      - "27022:27017"
    networks:
      - app-network
  
  # Kafka & Zookeeper

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - app-network
    
volumes:
  mongo-user-data:
  mongo-notification-data:
  mongo-recommendation-data:
  redis-data:

networks:
  app-network:
    driver: bridge
